[versions]
# === start: Android SDK & build tools ===
targetSdkVersion = "33"
compileSdkVersion = "33"
buildToolsVersion = "30.0.3"
# MinSdk should be bumped per year,
# must also update the minSdkVersionString below when changing this
minSdkVersion = "24"
minSdkVersionString = "7.0"
# === end: Android SDK & build tools ===
kotlinVersion = "1.7.20"
coroutinesVersion = "1.6.4"
daggerHiltVersion = "2.42"
roomVersion = "2.4.3"
agpVersion = "7.3.1"
retrofitVersion = "2.9.0"
okHttpVersion = "4.9.3"
lifecycleVersion = "2.5.1"
androidXActivityVersion = "1.4.0"
fragmentVersion = "1.5.4"

[libraries]
# Kotlin
kotlinReflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlinVersion" }
coroutineCore = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutinesVersion" }
coroutineAndroid = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutinesVersion" }

# AndroidX
appCompatLib = "androidx.appcompat:appcompat:1.5.1"
coreKtx = "androidx.core:core-ktx:1.9.0"
fragmentKtx = { module = "androidx.fragment:fragment-ktx", version.ref = "fragmentVersion" }
roomRuntime = { module = "androidx.room:room-runtime", version.ref = "roomVersion" }
roomKtx = { module = "androidx.room:room-ktx", version.ref = "roomVersion" }
roomPaging = { module = "androidx.room:room-paging", version.ref = "roomVersion" }
roomCompiler = { module = "androidx.room:room-compiler", version.ref = "roomVersion" }
lifecycleViewModel = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycleVersion" }
lifecycleVmSavedState = { module = "androidx.lifecycle:lifecycle-viewmodel-savedstate", version.ref = "lifecycleVersion" }
lifecycleLiveData = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "lifecycleVersion" }
lifecycleReactiveStream = { module = "androidx.lifecycle:lifecycle-reactivestreams", version.ref = "lifecycleVersion" }
lifecycleRuntime = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycleVersion" }
lifecycleRuntimeKtx = { module = "androidx.lifecycle:lifecycle-runtime", version.ref = "lifecycleVersion" }
lifecycleCommonJava8 = { module = "androidx.lifecycle:lifecycle-common-java8", version.ref = "lifecycleVersion" }
lifecycleProcess = { module = "androidx.lifecycle:lifecycle-process", version.ref = "lifecycleVersion" }

# Google's Android UI lib
recylerViewLib = "androidx.recyclerview:recyclerview:1.3.0-rc01"
materialDesign = "com.google.android.material:material:1.7.0"
constraintLayoutLib = "androidx.constraintlayout:constraintlayout:2.1.4"

okHttpCore = { module = "com.squareup.okhttp3:okhttp", version.ref = "okHttpVersion" }
okHttpLoggingInterceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okHttpVersion" }
cronetOkHttp = "com.google.net.cronet:cronet-okhttp:0.1.0"
retrofitCore = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofitVersion" }
retrofitGsonConverter = { module = "com.squareup.retrofit2:converter-gson", version.ref = "retrofitVersion" }

# Dagger & Hilt
daggerCore = { module = "com.google.dagger:dagger", version.ref = "daggerHiltVersion" }
daggerAndroid = { module = "com.google.dagger:dagger-android", version.ref = "daggerHiltVersion" }
daggerHiltAndroid = { module = "com.google.dagger:hilt-android", version.ref = "daggerHiltVersion" }
# Dagger kapt
daggerCompiler = { module = "com.google.dagger:dagger-compiler", version.ref = "daggerHiltVersion" }
daggerAndroidProcessor = { module = "com.google.dagger:dagger-android-processor", version.ref = "daggerHiltVersion" }
daggerHiltCompiler = { module = "com.google.dagger:hilt-compiler", version.ref = "daggerHiltVersion" }
daggerHiltAndroidCompiler = { module = "com.google.dagger:hilt-android-compiler", version.ref = "daggerHiltVersion" }
daggerHiltTest = { module = "com.google.dagger:hilt-android-testing", version.ref = "daggerHiltVersion" }

# Other libs
timber = "com.jakewharton.timber:timber:5.0.1"
gson = "com.google.code.gson:gson:2.9.0"

# Testing
archCoreTesting = "androidx.arch.core:core-testing:2.1.0"
androidXTestCore = "androidx.test:core:1.4.0"
androidXTestRunner = "androidx.test:runner:1.4.0"
androidXTestJUnitRunner = "androidx.test.ext:junit:1.1.4-rc01"
fragmentTest = { module = "androidx.fragment:fragment-testing", version.ref = "fragmentVersion" }
robolectricTest = "org.robolectric:robolectric:4.9"
mockk = "io.mockk:mockk:1.13.2"
junit = "junit:junit:4.13.2"
coroutinesTest = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutinesVersion" }
roomTesting = { module = "androidx.room:room-testing", version.ref = "roomVersion" }
lifecycleRuntimeTesting = { module = "androidx.lifecycle:lifecycle-runtime-testing", version.ref = "lifecycleVersion" }
mockWebServer = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okHttpVersion" }
turbine = "app.cash.turbine:turbine:0.12.0"
kakaoTest = "io.github.kakaocup:kakao:3.1.0"
espressoCore = "androidx.test.espresso:espresso-core:3.4.0"
androidUiAutomation = "androidx.test.uiautomator:uiautomator:2.3.0-alpha01"

[bundles]
daggerHiltBundle = [
    "daggerAndroid",
    "daggerCore",
    "daggerHiltAndroid"
]
coroutinesBundle = [
    "coroutineCore",
    "coroutineAndroid"
]
roomBundle = [
    "roomRuntime",
    "roomKtx",
]
okHttpBundle = [
    "retrofitCore",
    "gson",
    "okHttpCore",
    "retrofitGsonConverter",
    "okHttpLoggingInterceptor",
]
fragmentBundle = [
    "fragmentKtx",
    "coreKtx",
    "appCompatLib",
]
coreUiBundle = [
    "materialDesign",
    "constraintLayoutLib",
]
lifecycleBundle = [
    # ViewModel
    "lifecycleViewModel",
    # LiveData
    "lifecycleLiveData",
    # Saved state module for ViewModel
    "lifecycleVmSavedState",
    "lifecycleRuntimeTesting",
    # Lifecycles only (without ViewModel or LiveData)
    "lifecycleRuntime",
    "lifecycleRuntimeKtx",
    # optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    "lifecycleProcess",
]
unitTestBundle = [
    "junit",
    "mockk",
    "turbine",
    "mockWebServer",
    "robolectricTest",
    "coroutinesTest",
    "archCoreTesting",
    "androidXTestCore",
    "fragmentTest",
]
uiTestBundle = [
    "androidXTestCore",
    "androidXTestRunner",
    "kakaoTest",
    "espressoCore",
    "androidUiAutomation",
    "daggerHiltTest",
    "androidXTestJUnitRunner",
]

# Any plugin used in `plugins{}` will be here
[plugins]
spotlessPlugin = "com.diffplug.spotless:6.11.0"
detektPlugin = "io.gitlab.arturbosch.detekt:1.22.0-RC2"
hiddenSecretPlugins = "com.klaxit.hiddensecrets:0.2.1"
gradleVersionsPlugin = "com.github.ben-manes.versions:0.43.0"
versionCatalogUpdatePlugin = "nl.littlerobots.version-catalog-update:0.7.0"
androidApplicationPlugin = { id = "com.android.application", version.ref = "agpVersion" }
androidLibraryPlugin = { id = "com.android.library", version.ref = "agpVersion" }
daggerHiltPlugin = { id = "com.google.dagger.hilt.android", version.ref = "daggerHiltVersion" }
kotlinAndroidPlugin = { id = "org.jetbrains.kotlin.android", version.ref = "kotlinVersion" }
kotlinKaptPlugin = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlinVersion" }
